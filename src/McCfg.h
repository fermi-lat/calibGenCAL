#ifndef McCfg_H
#define McCfg_H 1

// LOCAL INCLUDES
#include "ICfg.h"
#include "CGCUtil.h"

// GLAST INCLUDES
#include "xmlBase/IFile.h"

// EXTLIB INCLUDES

// STD INCLUDES
#include <fstream>

using namespace std;

class McCfg : ICfg {
 public:
  /// basic ctor
  McCfg() {valid = false;}
  virtual ~McCfg() {};

  /// clear all values, delete all pointers
  void clear();

  /// read in config data from config file, calculate dependent vars
  void readCfgFile(const string& cfgPath);

  /// return data valid flag.
  bool isValid() {return valid;}

  /// print summary to ostream
  void summarize();
 public:  // i know I'm not supposed to make data members public, but it's just easier this way!
  // CONFIGURABLE PARAMETERS //

  // SECTION: TEST_INFO //
  /// time of observation/measurement
  string timestamp;     
  /// instrument name "EM", "FM101", etc...
  string instrument;    
  /// work on any single tower bay # 
  int    twrBay;      

  // SECTION: PATHS //
  /// list of input root files
  string rootFileListStr; 

  /// input txt filename for integral non-linearity
  string intNonlinFile; 
  /// Data descriptoin file for .xml output
  string dtdPath;       
  /// 
  string dtdFilename;   

  /// folder for autonamed output files
  string outputDir;     

  /// output xml filename for pedestals
  string pedFileXML;    
  /// output xml filename for asym calibrations
  string asymFileXML;   
  /// output xml filename for MevPerDAC calibrations
  string mpdFileXML;    
  /// output xml filename for adc2nrg table
  string adc2nrgFileXML; 


  /// output ROOT histogram file - pedestal phase
  string pedHistFile;   
  /// output ROOT histogram file - asym phase
  string asymHistFile;  
  /// output ROOT histogram file - MevPerDAC phase
  string mpdHistFile;   

  /// output txt filename for pedestals
  string pedFileTXT;    
  /// output txt filename for asymmetry
  string asymFileTXT; 
  /// output txt filename for Mev per DAC Lrg Diode
  string mpdFileTXT; 

  /// duplicate of stdout log
  string logfile;       
    
  // SECTION: CONSTANTS //
  /// threshold to count a hit 
  double hitThresh;     
  
  /// horizontal pitch between 2 cal xtals
  double cellHorPitch;  
  /// vertical pitch between 2 cal xtals
  double cellVertPitch; 
  /// length of one cal CsI crystal
  double csiLength;     

  // SECTION: GENERAL //
  /// number of events for rough pedestal calibration
  int nEvtRoughPed;     
  /// number of events for Pedestal calibration
  int nEvtPed;          
  /// number of events for Asym calibration
  int nEvtAsym;         
  /// number of events for MevPerDAC calibration
  int nEvtMPD;          

  /// skip ped calib and read in prev results from .txt
  bool readInPeds;      
  /// skip Asym calib and read in prev results from .txt
  bool readInAsym;      
  /// skip MevPerDAC calibration entirely
  bool skipMPD;         
  /// stop after pedestal calibration
  bool pedsOnly;        

  /// \brief (optional) txt pedestal file to read in 
  /// default uses autogenerated name from input root file
  string inputPedFile;  


  /// generate xml output
  bool genXML;          
  /// generate text output
  bool genTXT;          
  /// generate histogram output
  bool genHistfiles;    
  /// clone stdout stream to a logfile
  bool genLogfile;      

  // DERIVED FROM CFG PARAMES //
  vector<string> rootFileList;
  
  /// multiplexing output stream will contain at least cout, but
  /// may also contain a logfile stream if the user requests it.
  CGCUtil::multiplexor_ostream ostrm;
  ofstream logStrm;

  /// CVS Tag string cleaned up for proper format in output XML files
  string creator;  

 private:
  /// string shared by all autogenerated output filenames 
  string baseFilename;  

  // Section decription strings
  /// TEST_INFO xml IFile section name
  static const string TEST_INFO; 
  /// PATHS xml IFile section name
  static const string PATHS;     
  /// CONSTANTS xml IFile section name
  static const string CONSTANTS; 
  /// GENERAL xml IFile section name
  static const string GENERAL;   

  bool valid;   // set to false member data is incomplete/invalid.
};

#endif // McCfg_H
